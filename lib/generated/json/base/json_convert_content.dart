// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:nothing/model/device_info_model.dart';
import 'package:nothing/model/error_model.dart';
import 'package:nothing/model/exception_model.dart';
import 'package:nothing/model/favorite_model.dart';
import 'package:nothing/model/file_model.dart';
import 'package:nothing/model/image_compression_model.dart';
import 'package:nothing/model/login_model.dart';
import 'package:nothing/model/message_model.dart';
import 'package:nothing/model/music_model.dart';
import 'package:nothing/model/poetry_model.dart';
import 'package:nothing/model/server_image_model.dart';
import 'package:nothing/model/setting_config_model.dart';
import 'package:nothing/model/version_update_model.dart';
import 'package:nothing/model/wedding_model.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value, {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError('$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<DeviceInfoModel>[] is M) {
      return data.map<DeviceInfoModel>((Map<String, dynamic> e) => DeviceInfoModel.fromJson(e)).toList() as M;
    }
    if (<DeviceInfoDeviceInfo>[] is M) {
      return data.map<DeviceInfoDeviceInfo>((Map<String, dynamic> e) => DeviceInfoDeviceInfo.fromJson(e)).toList() as M;
    }
    if (<DeviceInfoDeviceInfoIosInfo>[] is M) {
      return data
          .map<DeviceInfoDeviceInfoIosInfo>((Map<String, dynamic> e) => DeviceInfoDeviceInfoIosInfo.fromJson(e))
          .toList() as M;
    }
    if (<DeviceInfoDeviceInfoInfo>[] is M) {
      return data
          .map<DeviceInfoDeviceInfoInfo>((Map<String, dynamic> e) => DeviceInfoDeviceInfoInfo.fromJson(e))
          .toList() as M;
    }
    if (<Utsname>[] is M) {
      return data.map<Utsname>((Map<String, dynamic> e) => Utsname.fromJson(e)).toList() as M;
    }
    if (<DeviceInfoDeviceInfoAndroidInfo>[] is M) {
      return data
          .map<DeviceInfoDeviceInfoAndroidInfo>((Map<String, dynamic> e) => DeviceInfoDeviceInfoAndroidInfo.fromJson(e))
          .toList() as M;
    }
    if (<DeviceInfoDeviceInfoAndroidInfoDisplayMetrics>[] is M) {
      return data
          .map<DeviceInfoDeviceInfoAndroidInfoDisplayMetrics>(
              (Map<String, dynamic> e) => DeviceInfoDeviceInfoAndroidInfoDisplayMetrics.fromJson(e))
          .toList() as M;
    }
    if (<DeviceInfoDeviceInfoAndroidInfoVersion>[] is M) {
      return data
          .map<DeviceInfoDeviceInfoAndroidInfoVersion>(
              (Map<String, dynamic> e) => DeviceInfoDeviceInfoAndroidInfoVersion.fromJson(e))
          .toList() as M;
    }
    if (<DeviceInfoRuntimeInfo>[] is M) {
      return data.map<DeviceInfoRuntimeInfo>((Map<String, dynamic> e) => DeviceInfoRuntimeInfo.fromJson(e)).toList()
          as M;
    }
    if (<DeviceInfoPackageInfo>[] is M) {
      return data.map<DeviceInfoPackageInfo>((Map<String, dynamic> e) => DeviceInfoPackageInfo.fromJson(e)).toList()
          as M;
    }
    if (<ErrorModel>[] is M) {
      return data.map<ErrorModel>((Map<String, dynamic> e) => ErrorModel.fromJson(e)).toList() as M;
    }
    if (<ExceptionModel>[] is M) {
      return data.map<ExceptionModel>((Map<String, dynamic> e) => ExceptionModel.fromJson(e)).toList() as M;
    }
    if (<FavoriteModel>[] is M) {
      return data.map<FavoriteModel>((Map<String, dynamic> e) => FavoriteModel.fromJson(e)).toList() as M;
    }
    if (<FileModel>[] is M) {
      return data.map<FileModel>((Map<String, dynamic> e) => FileModel.fromJson(e)).toList() as M;
    }
    if (<ImageCompressionModel>[] is M) {
      return data.map<ImageCompressionModel>((Map<String, dynamic> e) => ImageCompressionModel.fromJson(e)).toList()
          as M;
    }
    if (<LoginModel>[] is M) {
      return data.map<LoginModel>((Map<String, dynamic> e) => LoginModel.fromJson(e)).toList() as M;
    }
    if (<MessageModel>[] is M) {
      return data.map<MessageModel>((Map<String, dynamic> e) => MessageModel.fromJson(e)).toList() as M;
    }
    if (<MusicModel>[] is M) {
      return data.map<MusicModel>((Map<String, dynamic> e) => MusicModel.fromJson(e)).toList() as M;
    }
    if (<PoetryModel>[] is M) {
      return data.map<PoetryModel>((Map<String, dynamic> e) => PoetryModel.fromJson(e)).toList() as M;
    }
    if (<ServerImageModel>[] is M) {
      return data.map<ServerImageModel>((Map<String, dynamic> e) => ServerImageModel.fromJson(e)).toList() as M;
    }
    if (<SettingConfigModel>[] is M) {
      return data.map<SettingConfigModel>((Map<String, dynamic> e) => SettingConfigModel.fromJson(e)).toList() as M;
    }
    if (<VersionUpdateModel>[] is M) {
      return data.map<VersionUpdateModel>((Map<String, dynamic> e) => VersionUpdateModel.fromJson(e)).toList() as M;
    }
    if (<WeddingModel>[] is M) {
      return data.map<WeddingModel>((Map<String, dynamic> e) => WeddingModel.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (DeviceInfoModel).toString(): DeviceInfoModel.fromJson,
    (DeviceInfoDeviceInfo).toString(): DeviceInfoDeviceInfo.fromJson,
    (DeviceInfoDeviceInfoIosInfo).toString(): DeviceInfoDeviceInfoIosInfo.fromJson,
    (DeviceInfoDeviceInfoInfo).toString(): DeviceInfoDeviceInfoInfo.fromJson,
    (Utsname).toString(): Utsname.fromJson,
    (DeviceInfoDeviceInfoAndroidInfo).toString(): DeviceInfoDeviceInfoAndroidInfo.fromJson,
    (DeviceInfoDeviceInfoAndroidInfoDisplayMetrics).toString(): DeviceInfoDeviceInfoAndroidInfoDisplayMetrics.fromJson,
    (DeviceInfoDeviceInfoAndroidInfoVersion).toString(): DeviceInfoDeviceInfoAndroidInfoVersion.fromJson,
    (DeviceInfoRuntimeInfo).toString(): DeviceInfoRuntimeInfo.fromJson,
    (DeviceInfoPackageInfo).toString(): DeviceInfoPackageInfo.fromJson,
    (ErrorModel).toString(): ErrorModel.fromJson,
    (ExceptionModel).toString(): ExceptionModel.fromJson,
    (FavoriteModel).toString(): FavoriteModel.fromJson,
    (FileModel).toString(): FileModel.fromJson,
    (ImageCompressionModel).toString(): ImageCompressionModel.fromJson,
    (LoginModel).toString(): LoginModel.fromJson,
    (MessageModel).toString(): MessageModel.fromJson,
    (MusicModel).toString(): MusicModel.fromJson,
    (PoetryModel).toString(): PoetryModel.fromJson,
    (ServerImageModel).toString(): ServerImageModel.fromJson,
    (SettingConfigModel).toString(): SettingConfigModel.fromJson,
    (VersionUpdateModel).toString(): VersionUpdateModel.fromJson,
    (WeddingModel).toString(): WeddingModel.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}